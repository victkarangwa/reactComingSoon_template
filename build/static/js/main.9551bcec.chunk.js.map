{"version":3,"sources":["assets/img/thecampusLogo.jpeg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Alert","props","elevation","variant","useStyles","makeStyles","theme","root","margin","spacing","color","Completionist","className","renderer","days","hours","minutes","seconds","completed","App","classes","useState","openSnackbar","setOpenSnackbar","handleClose","triggerAlert","src","logo","alt","date","Date","now","parseInt","process","type","placeholder","value","onClick","e","setTimeout","IconButton","aria-label","target","href","Snackbar","open","autoHideDuration","onClose","id","severity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,4C,+TCc3C,SAASC,EAAMC,GACb,OAAO,kBAAC,IAAD,eAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAGtD,IAAMG,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,2BAOPC,EAAgB,kBAAM,0BAAMC,UAAU,aAAhB,4BACtBC,EAAW,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,QACxC,OADiE,EAAhBC,UAGxC,kBAAC,EAAD,MAML,yBAAKN,UAAU,SACb,yBAAKA,UAAU,cACb,0BAAMA,UAAU,aAAaE,GAD/B,QAGA,yBAAKF,UAAU,cACb,0BAAMA,UAAU,aAAaG,GAD/B,SAGA,yBAAKH,UAAU,cACb,0BAAMA,UAAU,aAAaI,GAD/B,WAGA,yBAAKJ,UAAU,cACb,0BAAMA,UAAU,aAAaK,GAD/B,aA+EOE,MAvEf,WACE,IAAMC,EAAUhB,IADH,EAE2BiB,oBAAS,GAFpC,mBAENC,EAFM,KAEQC,EAFR,KAIPC,EAAc,WAClBD,GAAgB,IAElB,SAASE,IACPF,GAAgB,GAOlB,OACE,yBAAKX,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,gBACb,yBAAKc,IAAKC,IAAMC,IAAI,SACpB,0BAAMhB,UAAU,YAAhB,gBAGJ,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,SAAf,mCACA,yBAAKA,UAAU,YAAf,2BACA,kBAAC,IAAD,CACEiB,KAAMC,KAAKC,MAAQC,SAASC,aAA6B,IACzDpB,SAAUA,IAEZ,yBAAKD,UAAU,cACb,8BACE,2BAAOsB,KAAK,QAAQC,YAAY,kBAChC,2BAAOD,KAAK,SAASE,MAAM,YAAYC,QAtBjD,SAAqBC,GACnBC,WAAWd,EAAc,UAwBrB,yBAAKb,UAAU,UACb,yBAAKA,UAAWQ,EAAQb,MACtB,kBAACiC,EAAA,EAAD,CAAYC,aAAW,WAAWC,OAAO,SAASC,KAAK,KACrD,kBAAC,IAAD,OAEF,kBAACH,EAAA,EAAD,CAAYC,aAAW,UAAUC,OAAO,SAASC,KAAK,KACpD,kBAAC,IAAD,OAEF,kBAACH,EAAA,EAAD,CAAYC,aAAW,YAAYC,OAAO,SAASC,KAAK,KACtD,kBAAC,IAAD,OAEF,kBAACH,EAAA,EAAD,CAAYC,aAAW,UAAUC,OAAO,SAASC,KAAK,KACpD,kBAAC,IAAD,OAEF,kBAACH,EAAA,EAAD,CAAYC,aAAW,WAAWC,OAAO,SAASC,KAAK,KACrD,kBAAC,IAAD,UAKR,kBAACC,EAAA,EAAD,CACEC,KAAMvB,EACNwB,iBAAkB,IAClBC,QAASvB,EACTa,QAASb,EACTwB,GAAG,cAEH,kBAAC,EAAD,CAAOC,SAAU,OAAQF,QAASvB,GAAlC,sCC5GY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9551bcec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thecampusLogo.d6dab34f.jpeg\";","import React, { useState } from 'react';\nimport logo from './assets/img/thecampusLogo.jpeg';\nimport './App.css';\nimport Countdown from 'react-countdown';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FbIcon from '@material-ui/icons/Facebook';\nimport TwIcon from '@material-ui/icons/Twitter';\nimport IgIcon from '@material-ui/icons/Instagram';\nimport YtIcon from '@material-ui/icons/YouTube';\nimport InIcon from '@material-ui/icons/LinkedIn';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant='filled' {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(0),\n      color: '#a0a0a0 !important',\n    },\n  },\n}));\n\n// Renderer callback with condition\n// Random component\nconst Completionist = () => <span className='ready-txt'>Let's get ready for it!</span>;\nconst renderer = ({ days, hours, minutes, seconds, completed }) => {\n  if (completed) {\n    // Render a completed state\n    return <Completionist />;\n  } else {\n    // Render a countdown\n\n    // return <span>{hours}:{minutes}:{seconds}</span>;\n    return (\n      <div className='timer'>\n        <div className='timer-sect'>\n          <span className='timer-box'>{days}</span>Days\n        </div>\n        <div className='timer-sect'>\n          <span className='timer-box'>{hours}</span>Hours\n        </div>\n        <div className='timer-sect'>\n          <span className='timer-box'>{minutes}</span>Minutes\n        </div>\n        <div className='timer-sect'>\n          <span className='timer-box'>{seconds}</span>Seconds\n        </div>\n      </div>\n    );\n  }\n};\n\nfunction App() {\n  const classes = useStyles();\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n\n  const handleClose = () => {\n    setOpenSnackbar(false);\n  };\n  function triggerAlert() {\n    setOpenSnackbar(true);\n  }\n\n  function handleEmail(e) {\n    setTimeout(triggerAlert, 2000);\n  }\n\n  return (\n    <div className='App'>\n      <div className='header-section'>\n        <div className='logo-section'>\n          <img src={logo} alt='logo' />\n          <span className='logo-txt'>The campus</span>\n        </div>\n      </div>\n      <div className='body-section'>\n        <div className='tuned'>Stay tuned to something amazing</div>\n        <div className='text-big'>We are coming very soon</div>\n        <Countdown\n          date={Date.now() + parseInt(process.env.REACT_APP_TIMER, 10)}\n          renderer={renderer}\n        />\n        <div className='input-sect'>\n          <form>\n            <input type='email' placeholder='Email address' />\n            <input type='button' value='Notify me' onClick={handleEmail} />\n          </form>\n        </div>\n        <div className='footer'>\n          <div className={classes.root}>\n            <IconButton aria-label='facebook' target='_blank' href='#'>\n              <FbIcon />\n            </IconButton>\n            <IconButton aria-label='youtube' target='_blank' href='#'>\n              <YtIcon />\n            </IconButton>\n            <IconButton aria-label='instagram' target='_blank' href='#'>\n              <IgIcon />\n            </IconButton>\n            <IconButton aria-label='twitter' target='_blank' href='#'>\n              <TwIcon />\n            </IconButton>\n            <IconButton aria-label='linkedin' target='_blank' href='#'>\n              <InIcon />\n            </IconButton>\n          </div>\n        </div>\n      </div>\n      <Snackbar\n        open={openSnackbar}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        onClick={handleClose}\n        id='closeAlert'\n      >\n        <Alert severity={'info'} onClose={handleClose}>\n          Thank you! we will contact you.\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}